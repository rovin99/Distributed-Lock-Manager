// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/lock.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LockService_ClientInit_FullMethodName  = "/lock_service.LockService/client_init"
	LockService_LockAcquire_FullMethodName = "/lock_service.LockService/lock_acquire"
	LockService_LockRelease_FullMethodName = "/lock_service.LockService/lock_release"
	LockService_FileAppend_FullMethodName  = "/lock_service.LockService/file_append"
	LockService_ClientClose_FullMethodName = "/lock_service.LockService/client_close"
)

// LockServiceClient is the client API for LockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LockServiceClient interface {
	ClientInit(ctx context.Context, in *Int, opts ...grpc.CallOption) (*StatusMsg, error)
	LockAcquire(ctx context.Context, in *LockArgs, opts ...grpc.CallOption) (*Response, error)
	LockRelease(ctx context.Context, in *LockArgs, opts ...grpc.CallOption) (*Response, error)
	FileAppend(ctx context.Context, in *FileArgs, opts ...grpc.CallOption) (*Response, error)
	ClientClose(ctx context.Context, in *Int, opts ...grpc.CallOption) (*StatusMsg, error)
}

type lockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLockServiceClient(cc grpc.ClientConnInterface) LockServiceClient {
	return &lockServiceClient{cc}
}

func (c *lockServiceClient) ClientInit(ctx context.Context, in *Int, opts ...grpc.CallOption) (*StatusMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusMsg)
	err := c.cc.Invoke(ctx, LockService_ClientInit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockServiceClient) LockAcquire(ctx context.Context, in *LockArgs, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, LockService_LockAcquire_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockServiceClient) LockRelease(ctx context.Context, in *LockArgs, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, LockService_LockRelease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockServiceClient) FileAppend(ctx context.Context, in *FileArgs, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, LockService_FileAppend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockServiceClient) ClientClose(ctx context.Context, in *Int, opts ...grpc.CallOption) (*StatusMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusMsg)
	err := c.cc.Invoke(ctx, LockService_ClientClose_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LockServiceServer is the server API for LockService service.
// All implementations must embed UnimplementedLockServiceServer
// for forward compatibility.
type LockServiceServer interface {
	ClientInit(context.Context, *Int) (*StatusMsg, error)
	LockAcquire(context.Context, *LockArgs) (*Response, error)
	LockRelease(context.Context, *LockArgs) (*Response, error)
	FileAppend(context.Context, *FileArgs) (*Response, error)
	ClientClose(context.Context, *Int) (*StatusMsg, error)
	mustEmbedUnimplementedLockServiceServer()
}

// UnimplementedLockServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLockServiceServer struct{}

func (UnimplementedLockServiceServer) ClientInit(context.Context, *Int) (*StatusMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientInit not implemented")
}
func (UnimplementedLockServiceServer) LockAcquire(context.Context, *LockArgs) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockAcquire not implemented")
}
func (UnimplementedLockServiceServer) LockRelease(context.Context, *LockArgs) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockRelease not implemented")
}
func (UnimplementedLockServiceServer) FileAppend(context.Context, *FileArgs) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileAppend not implemented")
}
func (UnimplementedLockServiceServer) ClientClose(context.Context, *Int) (*StatusMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientClose not implemented")
}
func (UnimplementedLockServiceServer) mustEmbedUnimplementedLockServiceServer() {}
func (UnimplementedLockServiceServer) testEmbeddedByValue()                     {}

// UnsafeLockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LockServiceServer will
// result in compilation errors.
type UnsafeLockServiceServer interface {
	mustEmbedUnimplementedLockServiceServer()
}

func RegisterLockServiceServer(s grpc.ServiceRegistrar, srv LockServiceServer) {
	// If the following call pancis, it indicates UnimplementedLockServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LockService_ServiceDesc, srv)
}

func _LockService_ClientInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).ClientInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LockService_ClientInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).ClientInit(ctx, req.(*Int))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockService_LockAcquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).LockAcquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LockService_LockAcquire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).LockAcquire(ctx, req.(*LockArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockService_LockRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).LockRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LockService_LockRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).LockRelease(ctx, req.(*LockArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockService_FileAppend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).FileAppend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LockService_FileAppend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).FileAppend(ctx, req.(*FileArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockService_ClientClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).ClientClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LockService_ClientClose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).ClientClose(ctx, req.(*Int))
	}
	return interceptor(ctx, in, info, handler)
}

// LockService_ServiceDesc is the grpc.ServiceDesc for LockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lock_service.LockService",
	HandlerType: (*LockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "client_init",
			Handler:    _LockService_ClientInit_Handler,
		},
		{
			MethodName: "lock_acquire",
			Handler:    _LockService_LockAcquire_Handler,
		},
		{
			MethodName: "lock_release",
			Handler:    _LockService_LockRelease_Handler,
		},
		{
			MethodName: "file_append",
			Handler:    _LockService_FileAppend_Handler,
		},
		{
			MethodName: "client_close",
			Handler:    _LockService_ClientClose_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lock.proto",
}
