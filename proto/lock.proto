syntax = "proto3";

// LockService Protocol
// This file defines the protocol buffers and services for the distributed lock manager.
//
// IMPORTANT: RPC Naming Migration Plan
// -------------------------------------
// Some RPC names in this file reflect older primary/secondary terminology.
// In the future, these should be migrated to reflect the leader/follower terminology:
//
// - UpdateSecondaryState → ReplicateLockState (leader → follower replication)
// - Ping → HeartbeatPing (server to server heartbeats)
//
// For backward compatibility, the old names are kept for now. When updating,
// be sure to regenerate proto code and update all clients.

package lock;

option go_package = "Distributed-Lock-Manager/proto";

// The lock service definition
service LockService {
  // Client API RPCs
  
  // Initialize a new client
  rpc ClientInit (ClientInitArgs) returns (ClientInitResponse) {}
  
  // Acquire a lock
  rpc LockAcquire (LockArgs) returns (LockResponse) {}
  
  // Release a lock
  rpc LockRelease (LockArgs) returns (LockResponse) {}
  
  // Append to a file
  rpc FileAppend (FileArgs) returns (FileResponse) {}
  
  // Renew lease for a lock
  rpc RenewLease (LeaseArgs) returns (LeaseResponse) {}
  
  // Server-to-server replication and coordination RPCs

  // Get server information (used for cluster coordination and ID verification)
  rpc ServerInfo(ServerInfoRequest) returns (ServerInfoResponse) {}
  
  // Verify file access (used to check shared filesystem)
  rpc VerifyFileAccess(FileAccessRequest) returns (FileAccessResponse) {}

  // LEGACY NAME: Will be renamed to ReplicateLockState in future versions
  // Updates lock state on follower servers
  rpc UpdateSecondaryState(ReplicatedState) returns (ReplicationResponse) {}
  
  // LEGACY NAME: Will be renamed to HeartbeatPing in future versions
  // Sends heartbeat between servers for failure detection and leader awareness
  rpc Ping(HeartbeatRequest) returns (HeartbeatResponse) {}

  // Leadership election (propose becoming the leader)
  rpc ProposePromotion(ProposeRequest) returns (ProposeResponse) {}
}

// Client initialization arguments
message ClientInitArgs {
  int32 client_id = 1;
  string request_id = 2;  // For request idempotence
}

// Client initialization response
message ClientInitResponse {
  Status status = 1;
  string error_message = 2;
}

// Lock operation arguments
message LockArgs {
  int32 client_id = 1;
  string token = 2;       // Token for lock validation
  string request_id = 3;  // For request idempotence
}

// Lock operation response
message LockResponse {
  Status status = 1;
  string error_message = 2;
  string token = 3;       // Token for future operations
}

// File operation arguments
message FileArgs {
  int32 client_id = 1;
  string filename = 2;
  bytes content = 3;
  string token = 4;       // Token for permission validation
  string request_id = 5;  // For request idempotence
}

// File operation response
message FileResponse {
  Status status = 1;
  string error_message = 2;
}

// Lease renewal arguments
message LeaseArgs {
  int32 client_id = 1;
  string token = 2;       // Token for lease validation
  string request_id = 3;  // For request idempotence
}

// Lease renewal response
message LeaseResponse {
  Status status = 1;
  string error_message = 2;
}

// Replicated state message for leader → follower replication
// This message is used by leaders to replicate the current lock state to followers.
// It contains the current lock holder, token, expiry time, and the leader's epoch.
// Followers apply this state to maintain consistency across the cluster.
message ReplicatedState {
  int32 lock_holder = 1;       // ID of lock holder (-1 if free)
  string lock_token = 2;       // Current lock token
  int64 expiry_timestamp = 3;  // Expiry time as unix timestamp
  int64 epoch = 4;             // Epoch number of the leader
}

// Response to replication update
// This message is sent by followers in response to a ReplicatedState update.
// It includes the follower's current epoch for leader awareness.
message ReplicationResponse {
  Status status = 1;
  string error_message = 2;
  int64 current_epoch = 3;     // Current epoch of the responding server
}

// Heartbeat request (between servers in the cluster)
// Used for regular communication between servers to:
// 1. Detect server failures
// 2. Propagate leader information
// 3. Prevent unnecessary elections
// 4. Synchronize epoch information
message HeartbeatRequest {
  int32 server_id = 1;         // ID of the sending server
  int64 epoch = 2;             // Current epoch of the sending server
  bool is_leader = 3;          // Whether the sender is the leader
  string leader_address = 4;   // Address of the leader (if sender is leader or knows it)
}

// Heartbeat response
// Sent in response to heartbeat requests to acknowledge receipt and
// provide information about the responding server's state.
message HeartbeatResponse {
  Status status = 1;
  string error_message = 2;
  int64 current_epoch = 3;     // Current epoch of the responding server
}

// Leadership proposal request
message ProposeRequest {
  int32 candidate_id = 1;      // ID of the server proposing to be leader
  int64 proposed_epoch = 2;    // Proposed new epoch number
}

// Leadership proposal response
message ProposeResponse {
  int64 current_epoch = 1;     // Current epoch of the responding server
  bool vote_granted = 2;       // Whether vote was granted for this promotion
}

// ServerInfo request
message ServerInfoRequest {}

// ServerInfo response
message ServerInfoResponse {
  int32 server_id = 1;         // ID of this server
  string role = 2;             // Current role (leader/follower/candidate)
  int64 current_epoch = 3;     // Current epoch of the server
  string leader_address = 4;   // Address of the current leader if this server is a follower
}

// File access verification request
message FileAccessRequest {
  string file_path = 1;         // Path to the file to check
  string expected_content = 2;  // Content that should be in the file
}

// File access verification response
message FileAccessResponse {
  Status status = 1;
  string error_message = 2;
  string actual_content = 3;    // What was actually read from the file
}

// Status codes for responses
enum Status {
  OK = 0;                       // Operation successful
  ERROR = 1;                    // General error
  LOCK_HELD = 2;                // Lock is held by another client
  LOCK_NOT_HELD = 3;            // Client doesn't hold the lock
  INVALID_TOKEN = 4;            // Token validation failures
  PERMISSION_DENIED = 5;        // Permission-related errors
  SERVER_FENCING = 6;           // Server is in fencing period after promotion
  SECONDARY_MODE = 7;           // Server is not leader and can't process client requests
  DUPLICATE_SERVER_ID = 8;      // Server detected duplicate server ID
  FILESYSTEM_ERROR = 9;         // Error accessing shared filesystem
  STALE_EPOCH = 10;             // Message has a stale epoch number
} 